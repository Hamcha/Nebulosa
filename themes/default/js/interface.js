// Generated by CoffeeScript 1.6.3
(function() {
  var InterfaceViewModel;

  InterfaceViewModel = function() {
    var self;
    self = this;
    self.networks = ko.observable({});
    self.currentNetwork = ko.observable("");
    self.currentChannel = ko.observable("");
    self.messageBar = ko.observable("");
    self.userlist = ko.observable({});
    self.messages = ko.observable({});
    self.isChannel = true;
    self.bufferMode = false;
    self.networkList = ko.computed(function() {
      var cname, cval, network, nid, tdata, tnet, uchan, udata, uname, uval, _ref, _ref1, _ref2;
      tdata = [];
      udata = {};
      _ref = self.networks();
      for (nid in _ref) {
        network = _ref[nid];
        tnet = {};
        tnet.nickname = network.nickname;
        tnet.name = network.name;
        tnet.id = nid;
        tnet.chans = [];
        _ref1 = network.chans;
        for (cname in _ref1) {
          cval = _ref1[cname];
          cval.id = cname;
          tnet.chans.push(cval);
          uchan = [];
          _ref2 = cval.users;
          for (uname in _ref2) {
            uval = _ref2[uname];
            uchan.push(uname);
          }
          udata[tnet.id + cname] = uchan;
        }
        tdata.push(tnet);
      }
      return tdata;
    });
    self.channelUsers = ko.computed(function() {
      return self.userlist()[self.currentNetwork() + self.currentChannel()];
    });
    self.channelActivity = ko.computed(function() {
      return self.messages()[self.currentNetwork() + self.currentChannel()];
    });
    self.currentTopic = ko.computed(function() {
      var curchan, curnet, nets, tnick, topic;
      nets = self.networks();
      curnet = self.currentNetwork();
      curchan = self.currentChannel();
      if (!(self.isChannel && nets !== [] && curnet !== "" && curchan !== "")) {
        return false;
      }
      topic = nets[curnet].chans[curchan].topic;
      tnick = nets[curnet].chans[curchan].topicBy;
      if (topic != null) {
        return {
          topic: topic,
          topicBy: tnick
        };
      } else {
        return false;
      }
    });
    self.currentNickname = ko.computed(function() {
      var curnet, nets;
      curnet = self.currentNetwork();
      nets = self.networks()[curnet];
      if (nets != null) {
        return nets.nickname;
      } else {
        return null;
      }
    });
    self.netNickname = function(network) {
      var curnet, nets;
      curnet = self.currentNetwork();
      nets = self.networks()[curnet];
      if (nets != null) {
        return nets.nickname;
      } else {
        return null;
      }
    };
    self.addMessage = function(data) {
      var m, msgs, omitnick;
      msgs = self.messages();
      if (msgs[data.network + data.channel] == null) {
        msgs[data.network + data.channel] = [];
      }
      m = msgs[data.network + data.channel];
      if (m[m.length - 1] != null) {
        if (m[m.length - 1].user === data.nickname) {
          omitnick = true;
        }
      }
      msgs[data.network + data.channel].push({
        type: "message",
        shownick: omitnick == null,
        user: data.nickname,
        message: data.message,
        timestamp: formatTime(data.time)
      });
      self.messages(msgs);
      return scrollBottom();
    };
    self.addNotice = function(data) {
      var curchan, curnet, msgs;
      curchan = self.currentChannel();
      curnet = self.currentNetwork();
      msgs = self.messages();
      if (msgs[curnet + curchan] == null) {
        msgs[curnet + curchan] = [];
      }
      msgs[curnet + curchan].push({
        type: "notice",
        channel: data.channel,
        user: data.nickname,
        message: data.message,
        timestamp: formatTime(data.time)
      });
      self.messages(msgs);
      return scrollBottom();
    };
    self.addChannelAction = function(type, data) {
      var indexChan, indexUser, msgs, nets, ulist;
      msgs = self.messages();
      if (msgs[data.network + data.channel] == null) {
        msgs[data.network + data.channel] = [];
      }
      switch (type) {
        case "join":
          if (!self.bufferMode && data.nickname === self.netNickname(data.network)) {
            interop.socket.emit("chaninfo", {
              network: data.network,
              channel: data.channel
            });
            return;
          }
          msgs[data.network + data.channel].push({
            type: "chaction",
            message: data.nickname + " has joined the channel.",
            timestamp: formatTime(data.time)
          });
          if (self.bufferMode) {
            break;
          }
          ulist = self.userlist();
          ulist[data.network + data.channel].push(data.nickname);
          self.userlist(ulist);
          break;
        case "part":
          if (data.nickname === self.netNickname(data.network)) {
            self.switchTo(data.network, ":status", false);
            nets = self.networks();
            delete nets[data.network].chans[data.channel];
            self.networks(nets);
            return;
          }
          msgs[data.network + data.channel].push({
            type: "chaction",
            message: data.nickname + " has left the channel.",
            timestamp: formatTime(data.time)
          });
          if (self.bufferMode) {
            break;
          }
          ulist = self.userlist();
          indexChan = data.network + data.channel;
          indexUser = ulist[indexChan].indexOf(data.nickname);
          if (indexUser > 0) {
            ulist[indexChan].splice(ulist[indexChan].indexOf(data.nickname), 1);
          }
          self.userlist(ulist);
      }
      self.messages(msgs);
      return scrollBottom();
    };
    self.addError = function(message) {
      var curchan, curnet, msgs;
      curchan = self.currentChannel();
      curnet = self.currentNetwork();
      msgs = self.messages();
      if (msgs[curnet + curchan] == null) {
        msgs[curnet + curchan] = [];
      }
      msgs[curnet + curchan].push({
        type: "error",
        user: "",
        message: message
      });
      self.messages(msgs);
      return scrollBottom();
    };
    self.sendMessage = function() {
      var action, curnick, message, parts, tochn, tonet;
      tonet = self.currentNetwork();
      tochn = self.currentChannel();
      curnick = self.currentNickname();
      message = self.messageBar();
      if (message[0] === "/" && (message[1] != null) && message[1] !== "/") {
        parts = message.substring(1).split(" ");
        action = parts.splice(0, 1);
        if (interop.command[action] == null) {
          self.addError("Unsupported command (" + action + ")");
        } else {
          interop.command[action](tonet, tochn, curnick, parts);
        }
      } else {
        message = message.replace(/^\/\//, "/");
        interop.socket.emit("message", {
          network: tonet,
          channel: tochn,
          message: message,
          nickname: curnick
        });
        self.addMessage({
          network: tonet,
          nickname: self.currentNickname(),
          channel: tochn,
          message: message,
          time: +(new Date)
        });
      }
      return self.messageBar("");
    };
    self.switchTo = function(network, channel, isChannel) {
      self.isChannel = isChannel;
      self.currentNetwork(network);
      return self.currentChannel(channel);
    };
    self.updateChannelInfo = function(data) {
      var nets;
      nets = self.networks();
      self.updateChannelUsers({
        network: data.network,
        channel: data.channeldata.key,
        nicks: data.channeldata.users
      });
      nets[data.network].chans[data.channeldata.key] = data.channeldata;
      self.networks(nets);
      self.currentNetwork(data.network);
      return self.currentChannel(data.channeldata.key);
    };
    self.updateChannelUsers = function(data) {
      var indexChan, uchan, ulist, uname, uval, _ref;
      indexChan = data.network + data.channel;
      ulist = self.userlist();
      uchan = [];
      _ref = data.nicks;
      for (uname in _ref) {
        uval = _ref[uname];
        uchan.push(uname);
      }
      ulist[indexChan] = uchan;
      return self.userlist(ulist);
    };
    self.setTopic = function(data) {
      var msgs, nets;
      nets = self.networks();
      nets[data.network].chans[data.channel].topic = data.topic;
      nets[data.network].chans[data.channel].topicBy = data.nickname;
      self.networks(nets);
      msgs = self.messages();
      if (msgs[data.network + data.channel] == null) {
        msgs[data.network + data.channel] = [];
      }
      msgs[data.network + data.channel].push({
        type: "chaction",
        message: data.nickname + " has set the topic to: " + data.topic,
        timestamp: formatTime(data.time)
      });
      self.messages(msgs);
      return scrollBottom();
    };
    self.initNetworks = function(data) {
      var cname, cval, nets, network, nid, _ref;
      self.networks(data);
      for (nid in data) {
        network = data[nid];
        _ref = network.chans;
        for (cname in _ref) {
          cval = _ref[cname];
          self.updateChannelUsers({
            network: nid,
            channel: cname,
            nicks: cval.users
          });
        }
      }
      nets = self.networkList();
      if (nets[0] != null) {
        self.currentNetwork(nets[0].id);
      }
      if (nets[0].chans[0] != null) {
        self.currentChannel(nets[0].chans[0].key);
      }
    };
  };

  window["interface"] = new InterfaceViewModel();

  $(document).ready(function() {
    return ko.applyBindings(window["interface"]);
  });

}).call(this);
