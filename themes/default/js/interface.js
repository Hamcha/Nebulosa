// Generated by CoffeeScript 1.6.3
(function() {
  var InterfaceViewModel;

  InterfaceViewModel = function() {
    var self;
    self = this;
    self.networks = ko.observableArray([]);
    self.currentNetwork = ko.observable("ponychat");
    self.currentChannel = ko.observable("#testbass");
    self.messageBar = ko.observable("");
    self.userlist = ko.observable({});
    self.messages = ko.observable({});
    self.channelUsers = ko.computed(function() {
      return self.userlist()[self.currentNetwork() + self.currentChannel()];
    });
    self.channelActivity = ko.computed(function() {
      return self.messages()[self.currentNetwork() + self.currentChannel()];
    });
    self.currentNickname = ko.computed(function() {
      var curnet, nets;
      curnet = self.currentNetwork();
      nets = self.networks().filter(function(x) {
        return x.id === curnet;
      });
      if (nets[0] != null) {
        return nets[0].nickname;
      } else {
        return null;
      }
    });
    self.addMessage = function(data) {
      var msgs;
      msgs = self.messages();
      if (msgs[data.network + data.channel] == null) {
        msgs[data.network + data.channel] = [];
      }
      msgs[data.network + data.channel].push({
        type: "message",
        user: data.nickname,
        message: data.message
      });
      return self.messages(msgs);
    };
    self.addNotice = function(data) {
      var curchan, curnet, msgs;
      curchan = self.currentChannel();
      curnet = self.currentNetwork();
      msgs = self.messages();
      if (msgs[curnet + curchan] == null) {
        msgs[curnet + curchan] = [];
      }
      msgs[curnet + curchan].push({
        type: "notice",
        channel: data.channel,
        user: data.nickname,
        message: data.message
      });
      return self.messages(msgs);
    };
    self.addChannelAction = function(type, data) {
      var msgs;
      msgs = self.messages();
      if (msgs[data.network + data.channel] == null) {
        msgs[data.network + data.channel] = [];
      }
      switch (type) {
        case "join":
          msgs[data.network + data.channel].push({
            type: "chaction",
            message: data.nickname + " has joined the channel."
          });
          break;
        case "part":
          msgs[data.network + data.channel].push({
            type: "chaction",
            message: data.nickname + " has left the channel."
          });
      }
      return self.messages(msgs);
    };
    self.sendMessage = function() {
      var message, tochn, tonet;
      tonet = self.currentNetwork();
      tochn = self.currentChannel();
      message = self.messageBar();
      interop.socket.emit("message", {
        network: tonet,
        channel: tochn,
        message: message
      });
      self.addMessage({
        network: tonet,
        nickname: self.currentNickname(),
        channel: tochn,
        message: message
      });
      return self.messageBar("");
    };
    self.initNetworks = function(data) {
      var cname, cval, network, nid, tdata, tnet, uchan, udata, uname, uval, _ref, _ref1;
      tdata = [];
      udata = {};
      for (nid in data) {
        network = data[nid];
        tnet = {};
        tnet.nickname = network.nickname;
        tnet.name = network.name;
        tnet.id = nid;
        tnet.chans = [];
        _ref = network.chans;
        for (cname in _ref) {
          cval = _ref[cname];
          cval.id = cname;
          tnet.chans.push(cval);
          uchan = [];
          _ref1 = cval.users;
          for (uname in _ref1) {
            uval = _ref1[uname];
            uchan.push(uname);
          }
          udata[tnet.id + cname] = uchan;
        }
        tdata.push(tnet);
      }
      self.networks(tdata);
      self.userlist(udata);
    };
  };

  window["interface"] = new InterfaceViewModel();

  $(document).ready(function() {
    return ko.applyBindings(window["interface"]);
  });

}).call(this);
